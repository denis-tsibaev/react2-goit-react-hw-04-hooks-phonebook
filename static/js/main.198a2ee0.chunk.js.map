{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactItem/ContactItem.module.css","components/Filter/Filter.module.css","components/Section/Section.module.css","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Section/Section.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleInputChange","event","target","value","preventDefault","autoComplete","className","style","inputName","onChange","type","placeholder","pattern","title","required","inputNumber","formButton","ContactItem","onDelete","id","onClick","deleteBtn","ContactList","contacts","onDeleteContact","orderList","map","contactListItem","Filter","onFilterChange","filterInput","Section","children","section","App","JSON","parse","window","localStorage","getItem","setContacts","useEffect","setItem","stringify","filter","setFilter","newContact","shortid","generate","toast","error","find","contact","normalizedFilteredName","toLowerCase","includes","getFilteredContacts","contactId","autoClose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.198a2ee0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"orderList\":\"ContactList_orderList__2Z6YF\",\"contactListItem\":\"ContactList_contactListItem__3-suJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteBtn\":\"ContactItem_deleteBtn__2gNxl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__1Q21s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__td0T2\"};","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport style from './ContactForm.module.css';\r\n\r\nconst ContactForm = ({ onSubmit }) => {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        if (name === 'name') setName(value);\r\n        if (name === 'number') setNumber(value);\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        onSubmit(name, number);\r\n        setName('');\r\n        setNumber('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n            <div>\r\n                <label>\r\n                    Name\r\n                    <input\r\n                        className={style.inputName}\r\n                        onChange={handleInputChange}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={name}\r\n                        placeholder=\"text here\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    Number\r\n                    <input\r\n                        className={style.inputNumber}\r\n                        onChange={handleInputChange}\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        value={number}\r\n                        placeholder=\"text here\"\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                    />\r\n                </label>\r\n            </div>\r\n            <button type=\"submit\" className={style.formButton}>\r\n                Add contact\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n// export default class ContactForm extends Component {\r\n//     state = {\r\n//         name: '',\r\n//         number: '',\r\n//     };\r\n\r\n//     handleChange = event => {\r\n//         const { name, value } = event.target;\r\n//         this.setState({ [name]: value });\r\n//     };\r\n\r\n//     handleSubmit = event => {\r\n//         event.preventDefault();\r\n//         this.props.onSubmit(this.state);\r\n//         this.formReset();\r\n//     };\r\n\r\n//     formReset = () => {\r\n//         this.setState({\r\n//             name: '',\r\n//             number: '',\r\n//         });\r\n//     };\r\n\r\n//     render() {\r\n//         const { name, number } = this.state;\r\n//         const inputChange = this.handleChange;\r\n\r\n//         return (\r\n//             <form onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n//                 <div>\r\n//                     <label>\r\n//                         Name\r\n//                         <input\r\n//                             className={style.inputName}\r\n//                             onChange={inputChange}\r\n//                             type=\"text\"\r\n//                             name=\"name\"\r\n//                             value={name}\r\n//                             placeholder=\"text here\"\r\n//                             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//                             required\r\n//                         />\r\n//                     </label>\r\n//                 </div>\r\n//                 <div>\r\n//                     <label>\r\n//                         Number\r\n//                         <input\r\n//                             className={style.inputNumber}\r\n//                             onChange={inputChange}\r\n//                             type=\"tel\"\r\n//                             name=\"number\"\r\n//                             value={number}\r\n//                             placeholder=\"text here\"\r\n//                             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                             required\r\n//                         />\r\n//                     </label>\r\n//                 </div>\r\n//                 <button type=\"submit\" className={style.formButton}>\r\n//                     Add contact\r\n//                 </button>\r\n//             </form>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// ContactForm.propTypes = { onSubmit: PropTypes.func.isRequired };\r\n","import PropTypes from 'prop-types';\r\nimport style from './ContactItem.module.css';\r\n\r\nconst ContactItem = ({ name, number, onDelete, id }) => (\r\n    <>\r\n        <span>\r\n            {name}: {number}\r\n        </span>\r\n        <button\r\n            type=\"submit\"\r\n            onClick={() => onDelete(id)}\r\n            className={style.deleteBtn}\r\n        >\r\n            Delete\r\n        </button>\r\n    </>\r\n);\r\n\r\nContactItem.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    onDelete: PropTypes.func.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import PropTypes from 'prop-types';\r\nimport ContactItem from '../ContactItem';\r\nimport style from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n    return (\r\n        <ol className={style.orderList}>\r\n            {contacts.map(({ id, name, number }) => (\r\n                <li key={id} className={style.contactListItem}>\r\n                    <ContactItem\r\n                        name={name}\r\n                        number={number}\r\n                        id={id}\r\n                        onDelete={onDeleteContact}\r\n                    />\r\n                </li>\r\n            ))}\r\n        </ol>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        }).isRequired,\r\n    ),\r\n};\r\n\r\nexport default ContactList;\r\n","import style from './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onFilterChange }) => (\r\n    <div>\r\n        <label>\r\n            Find contacts by name\r\n            <input\r\n                type=\"text\"\r\n                className={style.filterInput}\r\n                value={value}\r\n                onChange={onFilterChange}\r\n            />\r\n        </label>\r\n    </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onFilterChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\nimport style from './Section.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n    <section className={style.section}>\r\n        {title && <h2>{title}</h2>}\r\n        {children}\r\n    </section>\r\n);\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import { useEffect, useState } from 'react';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport shortid from 'shortid';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter';\r\nimport Section from './components/Section';\r\n\r\nconst App = () => {\r\n    const [contacts, setContacts] = useState(\r\n        JSON.parse(window.localStorage.getItem('contacts')) ?? [],\r\n    );\r\n\r\n    useEffect(() => {\r\n        window.localStorage.setItem('contacts', JSON.stringify(contacts));\r\n    }, [contacts]);\r\n\r\n    const [filter, setFilter] = useState('');\r\n\r\n    const addContact = (name, number) => {\r\n        const newContact = {\r\n            id: shortid.generate(),\r\n            name,\r\n            number,\r\n        };\r\n        if (!name || !number) {\r\n            toast.error('Invalid name or number value!');\r\n        }\r\n\r\n        const doubleContact = contacts.find(\r\n            contact => contact.name === newContact.name,\r\n        );\r\n\r\n        !doubleContact\r\n            ? setContacts([newContact, ...contacts])\r\n            : toast.error(`${name} is already in contacts`);\r\n    };\r\n\r\n    const findName = event => setFilter(event.target.value);\r\n\r\n    const getFilteredContacts = () => {\r\n        const normalizedFilteredName = filter.toLowerCase();\r\n\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(normalizedFilteredName),\r\n        );\r\n    };\r\n\r\n    const removeContact = contactId => {\r\n        setContacts(contacts.filter(contact => contact.id !== contactId));\r\n    };\r\n\r\n    return (\r\n        <div className=\"appDiv\">\r\n            <Section title=\"Phonebook\">\r\n                <ContactForm onSubmit={addContact} />\r\n            </Section>\r\n            <Section>\r\n                <Filter onFilterChange={findName} value={filter} />\r\n            </Section>\r\n            <Section title=\"Contacts\">\r\n                <ContactList\r\n                    contacts={getFilteredContacts()}\r\n                    onDeleteContact={removeContact}\r\n                />\r\n            </Section>\r\n            <ToastContainer autoClose={2000} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n\r\n// export default class App extends Component {\r\n//     state = {\r\n//         contacts: [\r\n//             { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//             { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//             { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//             { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//         ],\r\n//         filter: '',\r\n//     };\r\n\r\n//     componentDidMount() {\r\n//         const contacts = localStorage.getItem('contacts');\r\n//         const parsedContacts = JSON.parse(contacts);\r\n\r\n//         if (parsedContacts) {\r\n//             this.setState({ contacts: parsedContacts });\r\n//         }\r\n//     }\r\n\r\n//     componentDidUpdate(prevProps, prevState) {\r\n//         const nextContacts = this.state.contacts;\r\n//         const prevContacts = prevState.contacts;\r\n\r\n//         if (nextContacts !== prevContacts) {\r\n//             console.log('updated contacts!');\r\n//             localStorage.setItem('contacts', JSON.stringify(nextContacts));\r\n//         }\r\n//     }\r\n\r\n//     formSubmitHandler = ({ name, number }) => {\r\n//         this.addContact(name, number);\r\n//     };\r\n\r\n//     addContact = (name, number) => {\r\n//         const normalizedName = name.toLowerCase();\r\n//         const checkForDoubleName = this.state.contacts.find(\r\n//             contact => normalizedName === contact.name.toLowerCase(),\r\n//         );\r\n\r\n//         if (checkForDoubleName) {\r\n//             // return alert(`${name} is already in contacts!`);\r\n//             toast.error(`${name} is already in contacts!`, {\r\n//                 theme: 'colored',\r\n//             });\r\n//             return;\r\n//         }\r\n\r\n//         const newContact = {\r\n//             id: shortid.generate(),\r\n//             name,\r\n//             number,\r\n//         };\r\n\r\n//         this.setState(({ contacts }) => ({\r\n//             contacts: [newContact, ...contacts],\r\n//         }));\r\n//     };\r\n\r\n//     deleteContact = contactId => {\r\n//         this.setState(prevState => ({\r\n//             contacts: prevState.contacts.filter(\r\n//                 contact => contact.id !== contactId,\r\n//             ),\r\n//         }));\r\n//     };\r\n\r\n//     handleFilterChange = event => {\r\n//         this.setState({ filter: event.target.value });\r\n//     };\r\n\r\n//     getVisibleContacts = () => {\r\n//         const { contacts, filter } = this.state;\r\n//         const normalizedFilter = filter.toLowerCase();\r\n//         return contacts.filter(contact =>\r\n//             contact.name.toLowerCase().includes(normalizedFilter),\r\n//         );\r\n//     };\r\n\r\n//     render() {\r\n//         const { filter } = this.state;\r\n//         const visibleContact = this.getVisibleContacts();\r\n\r\n//         return (\r\n//             <div className=\"appDiv\">\r\n//                 <Section title=\"Phonebook\">\r\n//                     <ContactForm onSubmit={this.formSubmitHandler} />\r\n//                 </Section>\r\n//                 <Section>\r\n//                     <Filter\r\n//                         onFilterChange={this.handleFilterChange}\r\n//                         value={filter}\r\n//                     />\r\n//                 </Section>\r\n//                 <Section title=\"Contacts\">\r\n//                     <ContactList\r\n//                         contacts={visibleContact}\r\n//                         onDeleteContact={this.deleteContact}\r\n//                     />\r\n//                 </Section>\r\n//                 <ToastContainer autoClose={2000} />\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputName\":\"ContactForm_inputName__2SSLf\",\"inputNumber\":\"ContactForm_inputNumber__1ij9K\",\"formButton\":\"ContactForm_formButton__3HjyE\"};"],"sourceRoot":""}